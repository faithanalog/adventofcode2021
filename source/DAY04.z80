.nolist
.global
#include "ti83plus.inc"
#include "dcs7.inc"
.endglobal
.variablename DAY04
.list
    .org progstart
    .db $BB,$6D
Init:
    xor d
    ret
    jr Start
    .dw Description
    .db $07,$00
    .dw $0000
    .dw $0000
Description:
    .db "day 04",0

.include "source/float.z80"
.varloc saferam1, 768
Start:

Main:
    bcall(_ClrScrnFull)

    ; Part 1 is basically
    ; - find the first winning bingo board
    ; - sum all unmarked numbers
    ; - mult by last called number

    ; so the way we can do this is by copying all the bingo boards. then we can steadily remove numbers from the boards
    ; as they're called. when a board is done, we can then do a simple sum of the board
    ;
    ; ... we're gonna need a lot of ram. time for more memory mapping. also might as well go into 15mhz mode
    ; while we're at it

    ; Map bank 5 @ C000h
    di

    ; while we're at it, might as well use iy
    push iy
    ld a,05h
    out (05h),a
    ld a,1
    out (20h),a

    working_boards = C000h
    board_size = 5 * 5

    ; iy stores bingo sequence
    ld iy,BINGO_SEQUENCE

    ld hl,BINGO_BOARDS
    ld de,working_boards
    ld bc,BINGO_BOARDS_END - BINGO_BOARDS
    ldir

    
    ; so we're gonna play out all the bingo games, scoring as we go.
    ; We want to track the first and the last winning bingo board score, as
    ; thats part 1 and 2

    .var 4, firstWin
    .var 4, lastWin
    .var 1, firstWinSet

    ; initialize wins to 0
    ld hl,0
    ld (firstWin),hl
    ld (firstWin + 2),hl
    ld (lastWin),hl
    ld (lastWin + 2),hl
    ld a,0
    ld (firstWinSet),a

    ; Also we need to make sure we dont count boards as winning if they already won
    board_win_cache = E000h
    ld a,0
    ld b,num_boards
    ld hl,board_win_cache
    -:
        ld (hl),a
        inc hl
        djnz {-}


    ld c,BINGO_SEQUENCE_END - BINGO_SEQUENCE
    _scoringLoop:
        ld a,(iy)

        push bc
        call callNumber
        pop bc

        ld b,num_boards
        ld ix,working_boards
        ld de,board_size
        -:
            ; did the board already win? it cant win again
            ld h,board_win_cache / 256
            ld l,b
            xor a
            or (hl)
            jr nz,{+}

            call checkBingoBoard
            jr nz,{+}
                ld (hl),$FF ; mark board as a winner in the win cache
                push bc
                push de

                call scoreBoard
                ld (lastWin),hl
                ld (lastWin + 2),de

                
                ld a,(firstWinSet)
                or a
                jr nz,{++} ; not first win, dont store there
                    ld (firstWin),hl
                    ld (firstWin + 2),de
                    ld a,$FF
                    ld (firstWinSet),a
                ++:

                pop de
                pop bc
            +:
            add ix,de
            djnz {-}

        inc iy
        dec c
        jr nz,_scoringLoop
        
    ; restore the world
    ld a,00h
    out (05h),a
    ld a,0
    out (20h),a
    pop iy
    ei

    ld hl,firstWin
    call ConvertToBCD
    ld a,0
    ld (curRow),a
    ld (curCol),a
    ld hl,bcdRam
    call DispBCD

    ld hl,lastWin
    call ConvertToBCD
    ld a,2
    ld (curRow),a
    ld a,0
    ld (curCol),a
    ld hl,bcdRam
    call DispBCD

    b_call(_GetKey)

    ret

; Call number in a, removing it from all bingo boards (sets to $FF)
;
; INPUT: a = number to call
; DESTROYS: hl,bc
callNumber:
    ld hl,working_boards
    ld c,((BINGO_BOARDS_END - BINGO_BOARDS) / 256) + 1
    ld b,(BINGO_BOARDS_END - BINGO_BOARDS) % 256
    -:
        --:
            cp (hl)
            jr nz,{+}
                ld (hl),$FF
            +:
            inc hl
            djnz {--}
        dec c
        jr nz,{-}
    ret


; Check if a bingo board at ix is valid.
; we're gonna do this the silly way lol, just sum all the possible rows/columns/diagonals to find all $FF
;
; INPUT: ix = board
; DESTROYS: a
; RETURNS: Z set = board wins
; 

checkBingoBoard:
    ; rows
    .for _row,0,4
        ld a,$FF
        .for _col,0,4
            and (ix + _col + (_row * 5))
        .loop
        inc a
        ret z
    .loop

    ; cols
    .for _col,0,4
        ld a,$FF
        .for _row,0,4
            and (ix + _col + (_row * 5))
        .loop
        inc a
        ret z
    .loop
    ret

; Score a board
;
; INPUT: ix = board
;        iy = sequence ptr to the number that was called for this board
; DESTROYS: hl,de,bc,a
; RETURNS: de:hl = board score
scoreBoard:
    ; sum board
    ld hl,0
    ld de,0
    ld a,$FF
    .for _row,0,4
        .for _col,0,4
            ld e,(ix + _col + (_row * 5))
            cp e ; compare to $FF, skip that
            jr z,{+}
                add hl,de
            +:
        .loop
    .loop

    ex de,hl ; move sum to DE
    ld b,0
    ld c,(iy)
    jp mult16by16


; bcd library
.include "source/bcd.z80"


; z80bits DE * BC
; output DE:HL
mult16by16:
    ld hl,0

	sla	e		; optimised 1st iteration
	rl	d
	jr	nc,$+4
	ld	h,b
	ld	l,c

.repeat 15
	add	hl,hl		; unroll 15 times
	rl	e		; ...
	rl	d		; ...
	jr	nc,$+6		; ...
	add	hl,bc		; ...
	jr	nc,$+3		; ...
	inc	de		; ...
.loop
    ret

BINGO_SEQUENCE:
.db 31,50,68,16,25,15,28,80,41,8,75,45,96,9,3,98,83,27,62,42,59,99,95,13,55,10,23,84,18,76,87,56,88,66,1,58,92,89,19,54,85,74,39,93,77,26,30,52,69,48,91,73,72,38,64,53,32,51,6,29,17,90,34,61,70,4,7,57,44,97,82,37,43,14,81,65,11,22,5,36,71,35,78,12,0,94,47,49,33,79,63,86,40,21,24,46,20,2,67,60
BINGO_SEQUENCE_END:

BINGO_BOARDS:
.db 95,91,54,75,45
.db 46,94,39,44,85
.db 31,43,24, 2,70
.db 90,58, 4,30,77
.db 13,26,38,52,34

.db 68,14,99,63,46
.db 67,16,82,10, 8
.db 55,52,41,51, 4
.db 90,17,32,44,74
.db 89,94,73,56,36

.db  6,91, 2,28,71
.db  7,88,37,21,36
.db 95,32,84,57, 8
.db 13,79,89,75,48
.db 47,81,66,17, 5

.db 44,55,48,16,41
.db 35, 5,43,53,11
.db  0,79,19,82,49
.db 30,85,31,72,39
.db 27,68,65,66,95

.db  6,46,55,24,40
.db 87,16,62,11,64
.db  8,49,18,59,91
.db 72,28,48,19,96
.db 39,73, 9,88, 0

.db 46, 1,18,93, 6
.db 50,96,41,81,58
.db 62,66,49,32,55
.db 29,11,65, 2,10
.db 71,30,17,69,43

.db 84,57, 6,56,95
.db 39,15,32, 1,10
.db 55,43,40, 3,22
.db 89,54,13,80,38
.db 72,12,59,71,77

.db  3,51,72,88, 6
.db 56,64,99,82,36
.db 75,81,42,67,24
.db 41,79,35,40,73
.db  2,14,61,50,87

.db 72, 7, 0,99,24
.db 29,81,92,74,38
.db 84,53,20,56,91
.db 93,64,44,48, 2
.db 37,40,88,96,97

.db 39,87,99,75,38
.db 45,81,46,72,62
.db 40, 8,24,67,79
.db 96, 1,77,73,70
.db 34,13,55,83,59

.db 18,38,55,84,58
.db 35,97,31,26,44
.db 80, 1,28,71,85
.db 45,46,10,32,99
.db 60,48,72,11,53

.db 53,44, 6,30,82
.db 65,64,10, 0,86
.db 81,50, 5,21,60
.db 16,19,97,66,73
.db 20,24,96,68,69

.db 33,85,88,58,20
.db 19, 2,99,40,70
.db 69,10,17,67,23
.db 48, 9,29,34, 3
.db 89,30,43,41,94

.db 30,83,37,14,78
.db 57,42,98,90,28
.db  5,82,51,15,55
.db 77,79,96,67,53
.db 22,76, 0,59,47

; board 14
.db 10,93,84,54,11
.db 59,30, 6,94,75
.db  9,62,68,37,24
.db 61, 3,66,58,74
.db 64, 0,83,32,13

.db 24,77,15, 5,49
.db 23,11,70,17,10
.db 62,33,38,36,12
.db  3,61, 0,26,65
.db 63,47,54,50, 9

.db 34,28,24,55,38
.db 69,37,36,32,72
.db 91,85, 9,64,68
.db 94,22,96,90,82
.db 30,20,97,19,56

.db 35,90,58,93, 2
.db 72, 8,27,88,16
.db 25,54,69,60,61
.db  1,15, 9,71,78
.db 89,42,46,57,91

.db 43,38,47, 1,82
.db 19,32, 2,95,51
.db 78,74,91,10,22
.db 80,77,33,60,14
.db  0,98,70,54,50

.db 71,94, 3,84,31
.db 10,59,12,28,46
.db 68,69,13,48,36
.db 37,49,24,26,61
.db 72,65,38,16,25

.db 68,78,10,90,29
.db 40,14,45,43,44
.db 27,75,72,39,87
.db 96,93,53,12,11
.db 37,64,56,59,76

.db 19,78,84,68,41
.db 36,96,87,15,55
.db 47,33,10,91,85
.db 11,94,31,49,35
.db 83,63,86, 4,76

.db  5,89,55,46,96
.db 67,22,95,82,56
.db 61,94,84,99,28
.db 71,70,16,57,63
.db 98,92,86,73,83

.db 56,24,93,88,29
.db 74,89,50,44,79
.db 97,49,87,31, 8
.db 70, 6,57, 3,82
.db 20,25,99,48,78

.db 80,20,45,22,57
.db 43,35,48,44,52
.db 29,98,38,27,11
.db 64,49,84,60,31
.db  7,97,17,85,74

.db 21, 1,18,41,62
.db 76,38,13,46,27
.db  0,16,43,28,53
.db 54,42,22,83,20
.db  4,25,50,11,56

.db 21,71,73,30,51
.db 92,27,14,16,11
.db 89,43,38,62,31
.db 65, 4,36,84,94
.db 56,13,59,22, 6

.db 46,28,45,57, 6
.db 16,67,33,20,44
.db 36,86,92, 3,11
.db 98,27,26,84,31
.db  5,76,13,65,25

.db 49,55,99,31,73
.db 80, 0,83,26,65
.db  3,96,60,37,50
.db 57,34, 7,20,23
.db 70,52,93,13,71

.db 78,41,81,32,76
.db 37,36,16,99,48
.db  3,93,33,85,35
.db 60,38,74,80,56
.db 86,29,87,20, 7

.db 98,24, 4, 9,82
.db 22,37,52,81,30
.db 51,70,17,23, 8
.db 60,61,75,35,85
.db 33,48,88,13,57

.db 49,52,91,21,46
.db 90,51,70, 5,35
.db 57,68,31,86,87
.db 42,36,25,95, 3
.db 73,64,17,96,80

.db  6,42,13,16,24
.db 51,72,55,78,47
.db 67,28, 7,97,64
.db 44,77,98,71,25
.db 82, 8,31,76,73

.db 63,79,18,80,27
.db 57,66,47,89,14
.db 15,61,94,38,29
.db 21,53,73,17,76
.db 65, 7,23,36, 3

.db 93,22, 8,52, 4
.db 63,31,90,46,68
.db 51,14,95,50,23
.db 17,34,60,75,36
.db 88,55, 7, 0,73

.db 42,67,91,15,83
.db  1,37,76,12,25
.db 29,82,50,70,86
.db 74,66,39,90,16
.db 31,71,47, 5,92

.db 98,48,27,87, 2
.db 60, 0,25,30,14
.db 44,61,94,82,16
.db 17,19,53,49,59
.db 15,85,50,63, 8

.db 63,12,52,81,97
.db 87,68,44,31,41
.db 39,24,99,27, 6
.db  1,21,35,59,51
.db  4,92, 3,90,62

.db 66,43,98,25,47
.db 59,16,75,44,82
.db 40,58,48,60,37
.db 13,81,61,45,83
.db 24,89,93,19,67

.db  8,86,47,81,83
.db  1,91,57,59,68
.db  0,52,25,93,95
.db 27,84,63,45,36
.db 39,62,20,99,88

.db 67,28,65, 4,17
.db 44,33,12,99,84
.db 27,36,34, 5,10
.db 38,63,97,82,64
.db 94,19,58,41, 6

.db 28,41,96,16,39
.db 93,78,56,69,75
.db 74,60, 9,30, 7
.db 12,81,35,84,94
.db 45,20, 6,49, 2

.db 33, 7, 5,43, 9
.db 97,65,50, 2, 1
.db 26,86,76,47,98
.db 83,31,30,58,52
.db 93,51,34,63,12

.db 65,81,10,46,59
.db 51,89,85, 2,52
.db 13,54,18,70, 4
.db 37,94,75,92,56
.db 58,99,91,32,41

.db 44,23,18,16,75
.db  5, 3,45,76,90
.db 20,71,69,37,99
.db 49,91,43,32,82
.db  4,79,51, 2,39

.db 54,80,71,61,76
.db 81,52, 6,89,34
.db 58,14,20,26,40
.db 25,60,45, 0, 3
.db 36,33,65,41,94

.db 53,23,56,55,92
.db  3,81,59, 0,35
.db 32,30,93,70,40
.db 45,91,24,65, 6
.db 95,88,16,47, 8

.db 24,23,10,47,63
.db 38,79,18,77,62
.db 13,88,72,68,36
.db 96,27,12,69,89
.db 28,94, 6,98,20

.db 70, 1,61,77,28
.db 92,22,30,48,96
.db 66, 3,34,29,45
.db 85, 6,17,87, 5
.db 97,89,14,80,20

.db 40,86,97, 5,54
.db 91,57,12,19, 7
.db 62,88,92,20,32
.db 50,77,11,39,22
.db 33, 2,21,95,35

.db 51,79,64,24,28
.db 95,19,82,58,76
.db 69,30, 9,14,42
.db 27,16,56,80,83
.db 52, 5,49,43,45

.db 26,65,68,18,55
.db 58,83,30,48, 4
.db 69,42,78,96,22
.db 91,13,82,38,41
.db 67,33,10,98,53

.db 74,97,43, 1,18
.db 49,30,28,10,15
.db 42,12,80,20,96
.db 41,92,67,22,36
.db  5,26,13,47, 4

.db 85,60,72,19,48
.db 61,21,43,34,83
.db 51,75,94,11,78
.db 27,89,45,49,79
.db 97,15, 5,28,50

.db 69,99,97,77,98
.db 37,80,86, 7,34
.db 85,28,31,23,16
.db 32,47, 8,40, 4
.db 46,91,71,54,74

.db 23,43,29, 7,21
.db 58,34,42, 4,38
.db 64,96,16,73,49
.db 36,92,52,81,31
.db 85,71,78,13, 5

.db 65,71,46, 5,11
.db 24, 4, 6, 0,23
.db 13,17,76,15,34
.db 27,79,10,56,85
.db 90,19,30,94,78

.db 81,40,65,12,35
.db 23,93,24,96,53
.db 27,60,87,59,33
.db 76,56, 4,17, 6
.db 78,49,90, 3,80

.db  7,25,42,85,39
.db 40, 6,26,11,63
.db 48,20,62,61,89
.db 78,15,18,21,53
.db 69, 4,87,47, 5

.db 38,65,87,72,26
.db 88,75,10,30, 3
.db 89,58, 7,20,32
.db 85, 2,97,63,15
.db 28,77,82,57,64

.db 16,89, 6,31,27
.db 45,69,61, 5,15
.db 40,75,64,94,98
.db 36,18,26,58,90
.db 10,44,59,13,67

.db 80,13,39,49,42
.db 50,94,12,14,88
.db 97,48,15,68,69
.db 21,18,51,99,91
.db 89,64,35,63,84

.db 81,96,26,43,30
.db  5,74, 9,93,60
.db 63,41, 1,14,22
.db  4,77,33,53, 3
.db 38,90,50,25,10

.db 58,66,17, 0,16
.db  5,67,41,48,40
.db 43,93,76,95,68
.db  4,13,14,51, 8
.db 56,74,23,57,94

.db 18,15,92, 4,20
.db 69,26,84,23, 2
.db 72,35,56,96, 9
.db 61,41,85,91,25
.db 13,70, 1,14,77

.db 15,20,77,80,47
.db 45,34,63,55,75
.db 65,12,66,44,22
.db 74, 3,25,38,93
.db  9,31,68,87,67

.db 54,95,79,50,75
.db 18,36,20,34,43
.db 17,65,55,98,61
.db 27,46,56, 6,52
.db 91,31,30,40, 0

.db 25,30,24,64,98
.db  8,72,53,45, 3
.db 27,77, 0,33,44
.db 89,39,34,71,38
.db 54,21,20,80,23

.db 69,38,63,60, 4
.db 55,37,83,68,61
.db 67,25,86,24,18
.db 22,59,65,28,70
.db 84,46,44,91,96

.db 35,27,65,31, 0
.db 46,97,44,74, 4
.db 56,61, 7,49,88
.db  5,38,50,20,26
.db 62, 9,45,64,51

.db  3,28,43,97, 7
.db 88,57,17,82,73
.db 16,94,74,22,39
.db 84,99,31, 1,47
.db 92,91,55,38,78

.db 60,31,29,49,72
.db 89,41, 5,79,22
.db 58,28,90,76,95
.db 93,45,14,47,37
.db 65,25, 7,59,62

.db 58, 1,73,30,55
.db 95,46, 5,80,63
.db 52,16,70,20,71
.db 84,60,15, 0,77
.db 99,89,17,72,31

.db 83,21,68,18,42
.db  1,28,97,31,35
.db  2,38,67,63,74
.db 77,27,48,90,86
.db 12,52,26,29,60

.db 81,53,80,85,96
.db 19,32,31,15,88
.db 91,92,66,37,34
.db 74,75,33,39,78
.db 42,40,30,83,58

.db 40,41,80,69,67
.db 24,63,97,33, 5
.db 28,84,34,72,11
.db 36,79,91,14,92
.db 55,89,59,10,44

.db  0,51,49,24,60
.db 48,65,28,70,66
.db 86,58,78,77,18
.db  6,44,50,37,36
.db  4,73,91,97,43

.db 66,42,76,12,48
.db 77,83,35,18,50
.db 30,87,95,99,11
.db  0,52,92,16,51
.db 26,56,39,64,62

.db 83,89,52,61,45
.db 74,77,66,59,30
.db 85,17,38,10, 8
.db 97,67,54,21,26
.db 34,63,11,94,40

.db 93,91,14,49,38
.db 77,53,29,36,39
.db 12,52, 0,48,92
.db 95,82,71,76,37
.db 19,70,75, 9,74

.db 80,49,59,67,27
.db 43,66,97,81,12
.db 10,77,24,75,68
.db 16,57,14,28,85
.db 41,52,23,15, 2

.db 39,89,66,27,11
.db 63,84,21,44,69
.db 56,51,58,70,83
.db 14, 0, 8,41,31
.db 98,18,61,97,74

.db 97,18,63,29,24
.db 75,73,80, 8, 7
.db 81,37,46,93,68
.db 57,32, 2,41, 5
.db  4,65,88,45,54

.db 87,26,81,12,50
.db 19, 9,68,23,71
.db 74,38, 4,34,16
.db 18,99,86,45, 7
.db 35, 8,11,98,57

.db 13,31,78,59,58
.db 51,61,96,68,44
.db 41,85,26,55,92
.db 11,62,30, 7,64
.db 18,19,73,27,17

.db 48,85,71,39,29
.db 33,79,24, 0,72
.db 95,52,12,77,40
.db 70,31,46,44,43
.db 61,88,73,49,65

.db 60,81,51,24,27
.db 23,28,47,85,67
.db 35,57,45,76,84
.db 19,48,30,37,74
.db 15,78,56,87,16

.db 12, 5,45,26,21
.db  1,71,51,10,25
.db 37,68,73,46,56
.db 55,20,63,87,91
.db 22,32,66,90,19

.db 20,59,12,29,97
.db 92,30,77,27,49
.db 14,98,23,50, 6
.db 11,47,61,34,36
.db 55,82,13,22,21

.db 29,37, 0,40,71
.db  2,43,97,18,59
.db 32,72,89,99,24
.db 58,90,73,60,85
.db 69,53,95,78,27

.db 58,28,32,52,55
.db 86,33, 1,41,60
.db  8,53,42,92, 5
.db 43,69,96,54,24
.db 74,10,17,89,85

.db 51,74,99,21,64
.db 54,27,60,32,37
.db 14,45,50,81,94
.db 28,11,77,17,23
.db 93,95,53,57,79

.db 16, 5,80,45,71
.db 22,57, 9,90,43
.db  3,52,47,59,84
.db 28,53,14,15, 7
.db 50,76,46,56,34

.db 83,62,77,56,26
.db 82,35,11, 6,51
.db 96,97,15, 1,78
.db 92,45,55,84,94
.db 20, 8,70,21,31

.db  4,47,68,81,12
.db 66,23,35, 8,39
.db 73,94,27,69,22
.db 59,11,53,26,99
.db  7,20,87,60,88

.db 90, 0,88,81,43
.db 47,54,42,29,97
.db 60,13,85,51,71
.db 56,14,94,80,41
.db 75, 8,35,69,61

.db 51,38,40,17,42
.db 19,26,92,64,67
.db 33,66,82,27,55
.db 62, 2,68,59,31
.db  7,24,20,91,79

.db 21,83,45,35,88
.db 85,11, 5,86,72
.db 78, 3,58, 0,89
.db 67, 1,39,59,63
.db 79,87,19, 4,57

.db 25,16,40,17,27
.db 96,72,29,32,87
.db 50,63,35,81,66
.db  7,11,92,68,69
.db 54,83,12,51,95

.db 64,98,67,54,75
.db  8,10,31, 5,57
.db 89,23,25,34,47
.db 72,74,37,48,94
.db 39,59,15,55,87
BINGO_BOARDS_END:

num_boards = (BINGO_BOARDS_END - BINGO_BOARDS) / board_size
.echo "num_boards: "
.echoln num_boards
