.module BCD
;Converts a 32bit little-endian int at HL to little-endian BCD at bcdRam
;Convert to BCD with double dabble
;Handles up to a _NUM_DIGITS (12 = max digits on unsigned 32 bit int)

.ifdef BCD64BIT
    _NUM_BYTES = 8
    _NUM_DIGITS = 20
    .var _NUM_DIGITS, bcdRam
    .var 8, bcdSource
    .echoln "using 64bit bcd mode"
.else
    _NUM_BYTES = 4
    _NUM_DIGITS = 12
    .var _NUM_DIGITS, bcdRam
    .var 4, bcdSource
.endif
ConvertToBCD:
    ld de,bcdSource
    ld bc,_NUM_BYTES
    ldir
    ld ix,bcdSource

    xor a
    ld hl,bcdRam
    ld b,_NUM_DIGITS
_zeroScratch:
    ld (hl),a
    inc hl
    djnz _zeroScratch

    ld b,_NUM_BYTES * 8
    _bcdConvLp:
        ;Do increment
        ld c,_NUM_DIGITS
        ld hl,bcdRam
        _bcdIncLp:
            ld a,(hl)
            cp 5
            jr c,$+4
            add a,3
            ld (hl),a
            inc hl
            dec c
            jr nz,_bcdIncLp

        sla (ix)
        .for _byte,1,_NUM_BYTES - 1
            rl (ix + _byte)
        .loop

        ld c,_NUM_DIGITS
        ld hl,bcdRam
        _bcdShiftLp:
            ld a,(hl)
            rla
            bit 4,a
            jr z,{@}
            and %1111
            scf ;Set carry if bit 4 set
            @:
            ld (hl),a
            inc hl
            dec c
            jr nz,_bcdShiftLp
        djnz _bcdConvLp
    ret

;Displays the _NUM_DIGITS digit little-endian BCD value at HL
;1 byte per digit
DispBCD:
    ld de,_NUM_DIGITS - 1
    add hl,de ;Go to end

    ;Skip leading zeroes, except if the value IS zero
    ld b,_NUM_DIGITS - 1
_skipLeadingZeroes:
    ld a,(hl)
    or a
    jr nz,{@}
    dec hl
    djnz _skipLeadingZeroes
@:
    inc b ;B = num digits to display
_dispBCDDigits:
    ld a,(hl)
    push hl
    push bc

    add a,'0'
    b_call(_PutC)
    
    pop bc
    pop hl
    dec hl
    djnz _dispBCDDigits
    ret

; HL = float
; display a TI float's integer component with _PutC
DispBCDFromFloat:
    inc hl
    ld a,(hl) ; load exponent
    sub $80   ; number of digits is exponent + 1 but is biased to $80
    ret       ; if exponent is negative, no integer component, bail
    inc a     ; a = exponent + 1

    ld b,a
    inc hl

.repeat 8
    ld c,(hl)
    ld a,c
    rra
    rra
    rra
    rra
    and $0F

    push hl
    push bc
    add a,'0'
    b_call(_PutC)
    pop bc
    pop hl

    dec b
    ret z

    ld a,c
    and $0F
    push hl
    push bc
    add a,'0'
    b_call(_PutC)
    pop bc
    pop hl

    dec b
    ret z

    inc hl
.loop
    ret

; Convert HL to BCD and store in a TI float pointed to by BC
fp_store_u16
    ld de,0
    jp fp_store_u32

; Convert DE:HL to BCD and store in a TI float pointed to by BC
.var 4, _intToFloatMem
fp_store_u32:
    push bc ; store destination for later

    ld (_intToFloatMem),hl
    ld (_intToFloatMem + 2),de
    call ConvertToBCD

    ; so at this point, bcdRam has the digits little endian
    ; we need to scan from the end like DispBCD to find the first non-zero
    ld hl,bcdRam + _NUM_DIGITS - 1

    ;Skip leading zeroes, except if the value IS zero
    ld b,_NUM_DIGITS - 1
-:
    ld a,(hl)
    or a
    jr nz,{+}
    dec hl
    djnz {-}
+:
    inc b ;B = num digits to display
    ; so at this point B is the num digits.
    ; this also lets us calculate our exponent as $80 + b - 1
    ld a,$7F
    add a,b

    pop ix ; restore destination float into IX
    ld (ix + 1),a   ; store exponent
    xor a
    ld (ix + 0),a   ; sign is positive
    ld (ix + 2),a   ; init rest of data to zero (inefficient but easier to implement)
    ld (ix + 3),a
    ld (ix + 4),a
    ld (ix + 5),a
    ld (ix + 6),a
    ld (ix + 7),a
    ld (ix + 8),a
    ld (ix + 9),a
    ld (ix + 10),a

    .for _digit, 0, (_NUM_DIGITS / 2) - 1
        ld a,(hl)
        inc hl
        or a
        rla
        rla
        rla
        rla
        dec b
        jr z,{+} ; don't include next digit if that was the last one
        or (hl)
        +:
        ld (ix + _digit + 2),a
        dec b
        ret z ; return if either of the digits was the last digit
        ret c ; 
    .loop
    ret ; should never run, but just in case
    


.endmodule
