.module BCD
;Converts a 32bit int at HL to BCD
;Convert to BCD with double dabble
;Handles up to a 14 digit number
_NUM_DIGITS = 14
.var _NUM_DIGITS, bcdRam
.var 4, bcdSource
ConvertToBCD:
    ld de,bcdSource
    ld bc,4
    ldir
    ld ix,bcdSource

    xor a
    ld hl,bcdRam
    ld b,_NUM_DIGITS
_zeroScratch:
    ld (hl),a
    inc hl
    djnz _zeroScratch

    ld b,32
    _bcdConvLp:
        ;Do increment
        ld c,_NUM_DIGITS
        ld hl,bcdRam
        _bcdIncLp:
            ld a,(hl)
            cp 5
            jr c,$+4
            add a,3
            ld (hl),a
            inc hl
            dec c
            jr nz,_bcdIncLp

        sla (ix)
        rl (ix + 1)
        rl (ix + 2)
        rl (ix + 3)

        ld c,_NUM_DIGITS
        ld hl,bcdRam
        _bcdShiftLp:
            ld a,(hl)
            rla
            bit 4,a
            jr z,{@}
            and %1111
            scf ;Set carry if bit 4 set
            @:
            ld (hl),a
            inc hl
            dec c
            jr nz,_bcdShiftLp
        djnz _bcdConvLp
    ret

;Displays the 14 digit BCD value at HL
;1 byte per digit
DispBCD:
    ld de,_NUM_DIGITS - 1
    add hl,de ;Go to end

    ;Skip leading zeroes, except if the value IS zero
    ld b,_NUM_DIGITS - 1
_skipLeadingZeroes:
    ld a,(hl)
    or a
    jr nz,{@}
    dec hl
    djnz _skipLeadingZeroes
@:
    inc b ;B = num digits to display
_dispBCDDigits:
    ld a,(hl)
    push hl
    push bc

    add a,'0'
    b_call(_PutC)
    
    pop bc
    pop hl
    dec hl
    djnz _dispBCDDigits
    ei
    ret

; HL = float
DispBCDFromFloat:
    inc hl
    ld a,(hl)
    sub $7F ; number of digits is exponent + 1 but exponent is biased to $80
    ld b,a
    inc hl

.repeat 8
    ld c,(hl)
    ld a,c
    rra
    rra
    rra
    rra
    and $0F

    push hl
    push bc
    add a,'0'
    b_call(_PutC)
    pop bc
    pop hl

    dec b
    ret z

    ld a,c
    and $0F
    push hl
    push bc
    add a,'0'
    b_call(_PutC)
    pop bc
    pop hl

    dec b
    ret z

    inc hl
.loop
    ret

.endmodule
