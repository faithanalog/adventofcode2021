.nolist
.global
#include "ti83plus.inc"
#include "dcs7.inc"
.endglobal
.variablename DAY14
.list
    .org progstart
    .db $BB,$6D
Init:
    xor d
    ret
    jr Start
    .dw Description
    .db $07,$00
    .dw $0000
    .dw $0000
Description:
    .db "day 14",0

.include "source/float.z80"
.include "source/memory.z80"
.include "source/control.z80"

.varloc saferam2, 500
Start:

Main:
    bcall(_ClrScrnFull)




    di
    ; while we're at it, might as well use iy
    push iy
    ; Map bank 5 @ C000h
    ld a,05h
    out (05h),a
    ; 15MHz
    ld a,1
    out (20h),a

    ; move the stack pointer
    .var 2, old_stack
    ld (old_stack),sp
    ld sp,saferam1 + 768


    ; So we dont have enough ram to do the simple solution to this one,
    ; need to do recursive graph traversal, which the problem seems set up
    ; for.
    ; BUT we can do it faster with memoization
    ;
    ; We're gonna memoize the steps here starting from the bottom of the
    ; tree going up. For each two-letter pair, we store how many of each
    ; letter will result at that depth. So at depth 1, its just whatever
    ; the direct mapping is. At depth two, its that and the child mappings.
    ; And so on.
    ;
    ; We do this breadth-first, so we calculate depth 1 for all pairs. Then we
    ; can calculate depth 2 for all pairs based on depth 1, and so on.
    ;
    ; Once we're done we can feed out input sequence into this to get the
    ; letter frequencies that result
    ;
    ; For any given letter pair XY(D)->Z the counters look like Z + XZ(D-1) + YZ(D-1)
    ;
    ; We only have 10 possible letters so this looks like a 10 * 10 * 10 array
    ; of 8-bit numbers.
    ;
    ; oh but we actually need it twice on two different ram pages
    ;
    ; To simplify math we're gonna do 16 * 16 * 10 6-bit numbers

    ; Then we need to store the counters, so we use a 5-bit index, but
    ; the counters need to be 64 bit so we end up with a 256 byte array
    ; for that one.


    MEMO_TABLE = C000h
    COUNTERS = FE00h
    LETTER_MAPPING = 8000h ; appData
    LETTER_MAPPING_COUNT = LETTER_MAPPING + 31


    call allocateLetterIDs


    .var 1, activePage
    ld a,05h
    ld (activePage),a

    memset(MEMO_TABLE, 4000h, 0)

    ld a,04h
    out (05h),a

    memset(MEMO_TABLE, 4000h, 0)

    ld a,05h
    out (05h),a

    ld a,0
    ld (iteration),a

    ; step 10 times
    ld b,10
    -:
        push bc
        call polymerizeAllPairs
        pop bc
        djnz {-}


    call polymerizeTemplate
    call sortCounters

    ; Find the minimum counter that isnt 0
    ld ix,COUNTERS - 8
    ld de,8
    -:
        add ix,de
        ld a,(ix)
        .for _byte,1,7
            or (ix + _byte)
        .loop
        jr z,{-}

    ; IX = min. do subtraction
    ; IY = max
    .var 8,part1ans
    ld iy,COUNTERS + (16 * 8) - 8
    or a
    .for _byte,0,7
        ld a,(iy + _byte)
        sbc a,(ix + _byte)
        ld (part1ans + _byte),a
    .loop

    ; 30 more times for part 2
    ld b,30
    -:
        push bc
        call polymerizeAllPairs
        pop bc
        djnz {-}


    call polymerizeTemplate
    call sortCounters

    ; Find the minimum counter that isnt 0
    ld ix,COUNTERS - 8
    ld de,8
    -:
        add ix,de
        ld a,(ix)
        .for _byte,1,7
            or (ix + _byte)
        .loop
        jr z,{-}

    ; IX = min. do subtraction
    ; IY = max
    .var 8,part2ans
    ld iy,COUNTERS + (16 * 8) - 8
    or a
    .for _byte,0,7
        ld a,(iy + _byte)
        sbc a,(ix + _byte)
        ld (part2ans + _byte),a
    .loop


    ; restore the world
    ld sp,(old_stack)
    ld a,00h
    out (05h),a
    ld a,0
    out (20h),a
    pop iy
    ei


    ld hl,part1ans
    call ConvertToBCD
    ld a,0
    ld (curRow),a
    ld (curCol),a
    ld hl,bcdRam
    call DispBCD

    ld hl,part2ans
    call ConvertToBCD
    ld a,2
    ld (curRow),a
    ld a,0
    ld (curCol),a
    ld hl,bcdRam
    call DispBCD

    b_call(_GetKey)

    ret

.define BCD64BIT
.include "source/bcd.z80"



; Allocate IDs for all letters
allocateLetterIDs:
    ; Init table to 255
    memset(LETTER_MAPPING, 31, FFh)
    xor a
    ld (LETTER_MAPPING_COUNT),a
    ld de,MAPPING_START
    ld bc,MAPPING_END - MAPPING_START
    -:
        ld a,(de)
        inc de
        call getIDForLetter
        cp FFh
        jr nz,{+}
            ld a,(LETTER_MAPPING_COUNT)
            ld (hl),a
            inc a
            ld (LETTER_MAPPING_COUNT),a
        +:
        
        djnzbc({-})


; Get an ID for a letter in a
; destroy HL
getIDForLetter:
    sub 'A'
    ld h,LETTER_MAPPING >> 8
    ld l,a

    ld a,(hl)
    ret


; D = Left
; E = Right
; Table is 16 * 16 * 64 
; 4 bit + 4 bits + 6 bits
memoTableIndex:
    ; shift E over 4 bits
    sla e
    sla e
    sla e
    sla e

    ; Now move the top two bits of E into D
    ; shift over 2 bits
    sla e
    rl d
    sla e
    rl d

    ld hl,MEMO_TABLE
    add hl,de
    ret


; Used to store the current memo entry counters
.var 64, newMemoEntry

; D - left
; E - right
; A - product
incrementProduct:
    add a,a ; 2x
    ld e,a
    add a,a ; 4x
    add a,e ; 2x + 4x = 6x

    ld d,0
    ld e,a
    ld hl,newMemoEntry
    add hl,de

    ; Inc the counter
    ld a,(hl)
    add a,1
    ld (hl),a
    .repeat 5
        inc hl
        ld a,(hl)
        adc a,0
        ld (hl),a
    .loop
    ret

; Add sub-products of a pairing to newMemoEntry
; D - left
; E - right
addSubProducts:
    call memoTableIndex
    ld de,newMemoEntry

    ld b,10
    -:
        ; Add one pair to newMemoEntry
        ld a,(de)
        add a,(hl)
        ld (de),a
        inc de
        inc hl
        .repeat 5
            ld a,(de)
            adc a,(hl)
            ld (de),a
            inc de
            inc hl
        .loop
        djnz {-}
    ret
    
    


; Fill in the insertion LUT from the mapping
; Starts on the previous page, swaps to new page for writes. ends on new page
.var 1,iteration
polymerizeAllPairs:
    ld ix,MAPPING_START
    ld b,(MAPPING_END - MAPPING_START) / 3

    -:
        push bc

        ld a,(ix + 0)
        call getIDForLetter
        ld d,a

        ld a,(ix + 1)
        call getIDForLetter
        ld e,a

        nop
        .echoln $

        push de
        call memoTableIndex
        ld de,newMemoEntry
        ld b,64
        ld a,0
        --:
            ld (de),a
            inc de
            djnz {--}
        pop de

        push de
        ld a,(ix + 2)
        call getIDForLetter
        push af
        
        ; hack
        ;ld hl,iteration
        ;dec (hl)
        ;inc (hl)
        call incrementProduct
        ; hack

        pop af
        pop de
        

        push de
        push af
        ld e,a
        call addSubProducts
        pop af
        pop de

        push de
        ld d,a
        call addSubProducts
        pop de


        call memoTableIndex
        ex de,hl
        ld hl,newMemoEntry
        ld bc,60

        ; switch to new table
        ld a,(activePage)
        xor 1
        out (05h),a
        ldir
        ld a,(activePage)
        out (05h),a


        ld de,3
        add ix,de

        pop bc
        djnz {-}

    ; swap active pages
    ld a,(activePage)
    xor 1
    ld (activePage),a
    out (05h),a

    ld hl,iteration
    inc (hl)
    ret

; sumPairs
sumPairs:
    ld hl,MEMO_TABLE
    ld de,COUNTERS

    ld c,10
    -:
        push hl
        ld b,160
        --:
            push de
            ld a,(de)
            add a,(hl)
            ld (de),a
            .repeat 5
                inc hl
                inc de
                ld a,(de)
                adc a,(hl)
                ld (de),a
            .loop

            ; advance to next entry
            ld de,64 - 5
            add hl,de

            ; restore counter pointer
            pop de
            djnz {--}
        pop hl

        ld a,l
        add a,6
        ld l,a
        ld a,h
        adc a,0
        ld h,a

        ld a,e
        add a,8
        ld e,a
        ld a,d
        adc a,0
        ld d,a

        dec c
        jr nz,{-}
    ret


; To polymerize the template we iterate over the thing and
; polymerize the pairs, but need to translate them first
; b = number of steps to polymerize (needed for part1 vs part2)
polymerizeTemplate:
    memset(COUNTERS, 8 * 16, 0)

    ; Initialize counters to the template sequence
    ld ix,TEMPLATE_START
    ld b,TEMPLATE_END - TEMPLATE_START
    -:
        ld a,(ix)
        call getIDForLetter
        add a,a
        add a,a
        add a,a
        ld h,COUNTERS >> 8
        ld l,a
        inc (hl)
        inc ix
        djnz {-}

    ; Given pairs polymerized to a step, add the counters for
    ; each pair in the template sequence to COUNTERS
    ld ix,TEMPLATE_START
    ld b,(TEMPLATE_END - TEMPLATE_START) - 1
    -:
        nop
        push bc

        ld a,(ix + 0)
        call getIDForLetter
        ld d,a

        ld a,(ix + 1)
        call getIDForLetter
        ld e,a

        call memoTableIndex
        ld de,COUNTERS
        
        nop

        ; Add everything at the pair to the global counters
        ld b,10
        --:
            ld a,(de)
            add a,(hl)
            ld (de),a
            inc de
            inc hl
            .repeat 5
                ld a,(de)
                adc a,(hl)
                ld (de),a
                inc de
                inc hl
            .loop
            ; final counters are 8 bit
            .repeat 2
                ld a,(de)
                adc a,0
                ld (de),a
                inc de
            .loop
            djnz {--}

        inc ix
        pop bc
        djnz {-}
    ret

; Sort the counters so we can do part1
sortCounters:
    ; void insertion_sort(int *a, int n) {
    ld ix,COUNTERS + 8h

    ; for(size_t i = n - 1; i > 0; --i) {
    ld b,16 - 1
    -:
        ; int tmp = a[n - i];
        .var 8, sort_tmp
        .for _offs,0,7
            ld a,(ix + _offs)
            ld (sort_tmp + _offs),a
        .loop
        
        ; size_t j = n - i;
        push ix
        pop iy
        ld a,16
        sub b
        ld c,a

        ; while(j > 0 && tmp < a[j - 1]) {
        --:
            ; tmp < a[j - 1]

            ; compare tmp to iy-1
            ; tmp - a[j - 1]
            or a
            .for _offs,0,7
                ld a,(sort_tmp + _offs)
                sbc a,(iy + (_offs - 8))
            .loop
            ; if carry, is less than. otherwise break
            jp nc,{+}
            
            ; a[j] = a[j - 1]
            .for _offs,0,7
                ld a,(iy + (_offs - 8))
                ld (iy + _offs),a
            .loop
            
            ; --j
            ld de,-8
            add iy,de
            dec c
            jp nz,{--}
        +:

        ; a[j] = tmp
        .for _offs,0,7
            ld a,(sort_tmp + _offs)
            ld (iy + _offs),a
        .loop
        
        ; a++
        ld de,8
        add ix,de
        dec b
        jp nz,{-}
    ret


INPUT:
;.define DEBUG
.ifdef DEBUG

TEMPLATE_START:
.db "NNCB"
TEMPLATE_END:

MAPPING_START:
.db "CHB"
.db "HHN"
.db "CBH"
.db "NHC"
.db "HBC"
.db "HCB"
.db "HNC"
.db "NNC"
.db "BHH"
.db "NCB"
.db "NBB"
.db "BNB"
.db "BBN"
.db "BCB"
.db "CCN"
.db "CNC"
MAPPING_END:
.else

TEMPLATE_START:
.db "BCHCKFFHSKPBSNVVKVSK"
TEMPLATE_END

MAPPING_START:
.db "OVV"
.db "COV"
.db "CSO"
.db "NPH"
.db "HHP"
.db "KOF"
.db "VOB"
.db "SPO"
.db "CBN"
.db "SBF"
.db "CFS"
.db "KSP"
.db "OHH"
.db "NNO"
.db "SFK"
.db "FHF"
.db "VVB"
.db "VHO"
.db "BVV"
.db "KFK"
.db "CCF"
.db "NFH"
.db "VSO"
.db "SKK"
.db "HVO"
.db "CKK"
.db "VPF"
.db "HPS"
.db "CNK"
.db "OBH"
.db "NSF"
.db "PSS"
.db "KBS"
.db "VFS"
.db "FPH"
.db "BBN"
.db "HFV"
.db "CHN"
.db "BHF"
.db "KKB"
.db "OON"
.db "NOK"
.db "BPK"
.db "KHP"
.db "KNP"
.db "OFB"
.db "VCF"
.db "NKF"
.db "ONO"
.db "OCP"
.db "VKO"
.db "SHC"
.db "NHC"
.db "FBB"
.db "FCK"
.db "OPO"
.db "PVV"
.db "BNV"
.db "PCK"
.db "PKS"
.db "FFC"
.db "SVS"
.db "HKH"
.db "NBC"
.db "OKC"
.db "PHB"
.db "SOO"
.db "PPF"
.db "KVV"
.db "FOB"
.db "FNH"
.db "HNC"
.db "VBK"
.db "CVO"
.db "BCC"
.db "CPS"
.db "FSS"
.db "KPV"
.db "BSV"
.db "BKB"
.db "PNC"
.db "PFS"
.db "HOV"
.db "NCN"
.db "SSN"
.db "BOP"
.db "BFN"
.db "NVP"
.db "PBK"
.db "HBH"
.db "VNH"
.db "FVB"
.db "FKK"
.db "POS"
.db "SCS"
.db "HSS"
.db "KCF"
.db "HCS"
.db "OSK"
.db "SNN"
MAPPING_END:

.endif
.db 0
INPUT_END:
